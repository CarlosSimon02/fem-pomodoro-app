@use "sass:math";
@use "variables" as *;

@function rem($number) {
  @if unitless($number) {
    $default-one-rem-in-pixel: 16;
    @return math.div($number, $default-one-rem-in-pixel) * 1rem;
  }

  @error "'#{$number}' should not have unit";
}

@function fluid(
  $min-size,
  $max-size,
  $min-breakpoint,
  $max-breakpoint,
  $unit: vw
) {
  @if unitless($min-size) and unitless($max-size) {
    $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
    $slope-to-unit: $slope * 100;
    $intercept-rem: rem($min-size - $slope * $min-breakpoint);

    @return clamp(
      #{rem($min-size)},
      #{$slope-to-unit}#{$unit} + #{$intercept-rem},
      #{rem($max-size)}
    );
  }

  @error "parameters should not have unit";
}

@function small-to-medium($min-size, $max-size) {
  @return fluid(
    $min-size,
    $max-size,
    map-get($breakpoints, small),
    map-get($breakpoints, medium)
  );
}

@function small-to-medium-xy($minx, $maxx-miny, $maxx-maxy) {
  $max: fluid($maxx-miny, $maxx-maxy, 800, 1024,vh);

  $slope: math.div($maxx-maxy - $minx, map-get($breakpoints, medium) - map-get($breakpoints, small));
  $slope-to-unit: $slope * 100;
  $intercept-rem: rem($minx - $slope * map-get($breakpoints, small));

  @return clamp(
    #{rem($minx)},
    #{$slope-to-unit}vw + #{$intercept-rem},
    #{$max}
  );
}

@mixin breakpoint-up($size) {
  @media screen and (min-width: map-get($breakpoints-up, $size)) {
    @content;
  }
}

@mixin breakpoint-down($size) {
  @media screen and (max-width: map-get($breakpoints-down, $size)) {
    @content;
  }
}
